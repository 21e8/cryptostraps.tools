{"version":3,"file":"Amount.mjs","sources":["../../../src/types/Amount.ts"],"sourcesContent":["import { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { CurrencyMismatchError, UnexpectedCurrencyError } from '@/errors';\nimport { BigNumber, BigNumberValues, toBigNumber } from './BigNumber';\n\nexport type Amount = {\n  basisPoints: BigNumber;\n  currency: Currency;\n};\n\nexport type Currency = {\n  symbol: string;\n  decimals: number;\n  namespace?: 'spl-token';\n};\n\nexport const SOL = {\n  symbol: 'SOL',\n  decimals: 9,\n};\n\nexport const USD = {\n  symbol: 'USD',\n  decimals: 2,\n};\n\nexport const amount = (\n  basisPoints: BigNumberValues,\n  currency: Currency\n): Amount => {\n  return {\n    basisPoints: toBigNumber(basisPoints),\n    currency,\n  };\n};\n\nexport const lamports = (lamports: number | BN): Amount => {\n  return amount(lamports, SOL);\n};\n\nexport const sol = (sol: number): Amount => {\n  return lamports(sol * LAMPORTS_PER_SOL);\n};\n\nexport const usd = (usd: number): Amount => {\n  return amount(usd * 100, USD);\n};\n\nexport const token = (\n  amount: BigNumberValues,\n  decimals: number = 0,\n  symbol: string = 'Token'\n): Amount => {\n  if (typeof amount !== 'number') {\n    amount = new BN(amount).toNumber();\n  }\n\n  return {\n    basisPoints: toBigNumber(amount * Math.pow(10, decimals)),\n    currency: {\n      symbol,\n      decimals,\n      namespace: 'spl-token',\n    },\n  };\n};\n\nexport const isSol = (currencyOrAmount: Currency | Amount): boolean => {\n  return sameCurrencies(currencyOrAmount, SOL);\n};\n\nexport const sameAmounts = (left: Amount, right: Amount): boolean => {\n  return sameCurrencies(left, right) && left.basisPoints.eq(right.basisPoints);\n};\n\nexport const sameCurrencies = (\n  left: Currency | Amount,\n  right: Currency | Amount\n): boolean => {\n  if ('currency' in left) {\n    left = left.currency;\n  }\n\n  if ('currency' in right) {\n    right = right.currency;\n  }\n\n  return (\n    left.symbol === right.symbol &&\n    left.decimals === right.decimals &&\n    left.namespace === right.namespace\n  );\n};\n\nexport const assertCurrency = (\n  actual: Currency | Amount,\n  expected: Currency\n) => {\n  if ('currency' in actual) {\n    actual = actual.currency;\n  }\n\n  if (!sameCurrencies(actual, expected)) {\n    throw new UnexpectedCurrencyError(actual, expected);\n  }\n};\n\nexport const assertSol = (actual: Currency | Amount) => {\n  assertCurrency(actual, SOL);\n};\n\nexport const assertSameCurrencies = (\n  left: Currency | Amount,\n  right: Currency | Amount,\n  operation?: string\n) => {\n  if ('currency' in left) {\n    left = left.currency;\n  }\n\n  if ('currency' in right) {\n    right = right.currency;\n  }\n\n  if (!sameCurrencies(left, right)) {\n    throw new CurrencyMismatchError(left, right, operation);\n  }\n};\n\nexport const addAmounts = (left: Amount, right: Amount): Amount => {\n  assertSameCurrencies(left, right, 'add');\n\n  return amount(left.basisPoints.add(right.basisPoints), left.currency);\n};\n\nexport const subtractAmounts = (left: Amount, right: Amount): Amount => {\n  assertSameCurrencies(left, right, 'subtract');\n\n  return amount(left.basisPoints.sub(right.basisPoints), left.currency);\n};\n\nexport const multiplyAmount = (left: Amount, multiplier: number): Amount => {\n  return amount(left.basisPoints.muln(multiplier), left.currency);\n};\n\nexport const divideAmount = (left: Amount, divisor: number): Amount => {\n  return amount(left.basisPoints.divn(divisor), left.currency);\n};\n\nexport const compareAmounts = (left: Amount, right: Amount): -1 | 0 | 1 => {\n  assertSameCurrencies(left, right, 'compare');\n\n  return left.basisPoints.cmp(right.basisPoints);\n};\n\nexport const isEqualToAmount = (left: Amount, right: Amount): boolean =>\n  compareAmounts(left, right) === 0;\n\nexport const isLessThanAmount = (left: Amount, right: Amount): boolean =>\n  compareAmounts(left, right) < 0;\n\nexport const isLessThanOrEqualToAmount = (\n  left: Amount,\n  right: Amount\n): boolean => compareAmounts(left, right) <= 0;\n\nexport const isGreaterThanAmount = (left: Amount, right: Amount): boolean =>\n  compareAmounts(left, right) > 0;\n\nexport const isGreaterThanOrEqualToAmount = (\n  left: Amount,\n  right: Amount\n): boolean => compareAmounts(left, right) >= 0;\n\nexport const isZeroAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) === 0;\n\nexport const isPositiveAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) >= 0;\n\nexport const isNegativeAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) < 0;\n\nexport const formatAmount = (value: Amount): string => {\n  if (value.currency.decimals === 0) {\n    return `${value.currency.symbol} ${value.basisPoints.toString()}`;\n  }\n\n  const power = new BN(10).pow(new BN(value.currency.decimals));\n  const basisPoints = value.basisPoints as unknown as BN & {\n    divmod: (other: BN) => { div: BN; mod: BN };\n  };\n\n  const { div, mod } = basisPoints.divmod(power);\n  const units = `${div.toString()}.${mod.abs().toString()}`;\n\n  return `${value.currency.symbol} ${units}`;\n};\n"],"names":["SOL","symbol","decimals","USD","amount","basisPoints","currency","toBigNumber","lamports","sol","LAMPORTS_PER_SOL","usd","token","BN","toNumber","Math","pow","namespace","isSol","currencyOrAmount","sameCurrencies","sameAmounts","left","right","eq","assertCurrency","actual","expected","UnexpectedCurrencyError","assertSol","assertSameCurrencies","operation","CurrencyMismatchError","addAmounts","add","subtractAmounts","sub","multiplyAmount","multiplier","muln","divideAmount","divisor","divn","compareAmounts","cmp","isEqualToAmount","isLessThanAmount","isLessThanOrEqualToAmount","isGreaterThanAmount","isGreaterThanOrEqualToAmount","isZeroAmount","value","isPositiveAmount","isNegativeAmount","formatAmount","toString","power","div","mod","divmod","units","abs"],"mappings":"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"}