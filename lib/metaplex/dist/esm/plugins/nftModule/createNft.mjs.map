{"version":3,"file":"createNft.mjs","sources":["../../../../src/plugins/nftModule/createNft.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { bignum } from '@metaplex-foundation/beet';\nimport {\n  Creator,\n  Collection,\n  Uses,\n  DataV2,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  useOperation,\n  Operation,\n  Signer,\n  OperationHandler,\n  token,\n} from '@/types';\nimport { JsonMetadata } from './JsonMetadata';\nimport {\n  createCreateMasterEditionV3InstructionWithSigners,\n  createCreateMetadataAccountV2InstructionWithSigners,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from '@/programs';\nimport { TransactionBuilder } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateNftOperation' as const;\nexport const createNftOperation = useOperation<CreateNftOperation>(Key);\nexport type CreateNftOperation = Operation<\n  typeof Key,\n  CreateNftInput,\n  CreateNftOutput\n>;\n\nexport interface CreateNftInput {\n  // Data.\n  uri: string;\n  name?: string;\n  symbol?: string;\n  sellerFeeBasisPoints?: number;\n  creators?: Creator[];\n  collection?: Collection;\n  uses?: Uses;\n  isMutable?: boolean;\n  maxSupply?: bignum;\n\n  // Signers.\n  mint?: Signer;\n  payer?: Signer;\n  mintAuthority?: Signer;\n  updateAuthority?: Signer;\n\n  // Public keys.\n  owner?: PublicKey;\n  freezeAuthority?: PublicKey; // TODO(loris): Make Option<PublicKey> | undefined.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface CreateNftOutput {\n  mint: Signer;\n  metadata: PublicKey;\n  masterEdition: PublicKey;\n  associatedToken: PublicKey;\n  transactionId: string;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createNftOperationHandler: OperationHandler<CreateNftOperation> = {\n  handle: async (operation: CreateNftOperation, metaplex: Metaplex) => {\n    const {\n      uri,\n      isMutable,\n      maxSupply,\n      mint = Keypair.generate(),\n      payer = metaplex.identity(),\n      mintAuthority = metaplex.identity(),\n      updateAuthority = mintAuthority,\n      owner = mintAuthority.publicKey,\n      freezeAuthority,\n      tokenProgram,\n      associatedTokenProgram,\n      confirmOptions,\n    } = operation.input;\n\n    let metadata: JsonMetadata;\n    try {\n      metadata = await metaplex.storage().downloadJson(uri);\n    } catch (e) {\n      metadata = {};\n    }\n\n    const data = resolveData(\n      operation.input,\n      metadata,\n      updateAuthority.publicKey\n    );\n\n    const metadataPda = findMetadataPda(mint.publicKey);\n    const masterEditionPda = findMasterEditionV2Pda(mint.publicKey);\n\n    const builder = await createNftBuilder(metaplex, {\n      data,\n      isMutable,\n      maxSupply,\n      mint,\n      payer,\n      mintAuthority,\n      updateAuthority,\n      owner,\n      freezeAuthority,\n      metadata: metadataPda,\n      masterEdition: masterEditionPda,\n      tokenProgram,\n      associatedTokenProgram,\n    });\n\n    const { tokenAddress } = builder.getContext();\n\n    const { signature } = await metaplex\n      .rpc()\n      .sendAndConfirmTransaction(builder, undefined, confirmOptions);\n\n    return {\n      mint,\n      metadata: metadataPda,\n      masterEdition: masterEditionPda,\n      associatedToken: tokenAddress,\n      transactionId: signature,\n    };\n  },\n};\n\nconst resolveData = (\n  input: CreateNftInput,\n  metadata: JsonMetadata,\n  updateAuthority: PublicKey\n): DataV2 => {\n  const metadataCreators: Creator[] | undefined = metadata.properties?.creators\n    ?.filter((creator) => creator.address)\n    .map((creator) => ({\n      address: new PublicKey(creator.address as string),\n      share: creator.share ?? 0,\n      verified: false,\n    }));\n\n  let creators = input.creators ?? metadataCreators ?? null;\n\n  if (creators === null) {\n    creators = [\n      {\n        address: updateAuthority,\n        share: 100,\n        verified: true,\n      },\n    ];\n  } else {\n    creators = creators.map((creator) => {\n      if (creator.address.toBase58() === updateAuthority.toBase58()) {\n        return { ...creator, verified: true };\n      } else {\n        return creator;\n      }\n    });\n  }\n\n  return {\n    name: input.name ?? metadata.name ?? '',\n    symbol: input.symbol ?? metadata.symbol ?? '',\n    uri: input.uri,\n    sellerFeeBasisPoints:\n      input.sellerFeeBasisPoints ?? metadata.seller_fee_basis_points ?? 500,\n    creators,\n    collection: input.collection ?? null,\n    uses: input.uses ?? null,\n  };\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateNftBuilderParams = {\n  // Data.\n  data: DataV2;\n  isMutable?: boolean;\n  maxSupply?: bignum;\n\n  // Signers.\n  mint: Signer;\n  payer: Signer;\n  mintAuthority: Signer;\n  updateAuthority?: Signer;\n\n  // Public keys.\n  owner: PublicKey;\n  freezeAuthority?: PublicKey;\n  metadata: PublicKey;\n  masterEdition: PublicKey;\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Instruction keys.\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  createMetadataInstructionKey?: string;\n  createMasterEditionInstructionKey?: string;\n};\n\nexport type CreateNftBuilderContext = {\n  tokenAddress: PublicKey;\n};\n\nexport const createNftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateNftBuilderParams\n): Promise<TransactionBuilder<CreateNftBuilderContext>> => {\n  const {\n    data,\n    isMutable,\n    maxSupply,\n    mint,\n    payer,\n    mintAuthority,\n    updateAuthority = mintAuthority,\n    owner,\n    freezeAuthority,\n    metadata,\n    masterEdition,\n    tokenProgram,\n    associatedTokenProgram,\n  } = params;\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint({\n      decimals: 0,\n      initialSupply: token(1),\n      mint,\n      mintAuthority,\n      freezeAuthority: freezeAuthority ?? null,\n      owner,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n      initializeMintInstructionKey: params.initializeMintInstructionKey,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey,\n      createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,\n      initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n      mintTokensInstructionKey: params.mintTokensInstructionKey,\n    });\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n\n  return (\n    TransactionBuilder.make<CreateNftBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ tokenAddress })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(tokenWithMintBuilder)\n\n      // Create metadata account.\n      .add(\n        createCreateMetadataAccountV2InstructionWithSigners({\n          data,\n          isMutable,\n          mintAuthority,\n          payer,\n          mint: mint.publicKey,\n          metadata,\n          updateAuthority: updateAuthority.publicKey,\n          instructionKey:\n            params.createMetadataInstructionKey ?? 'createMetadata',\n        })\n      )\n\n      // Create master edition account (prevents further minting).\n      .add(\n        createCreateMasterEditionV3InstructionWithSigners({\n          maxSupply,\n          payer,\n          mintAuthority,\n          updateAuthority,\n          mint: mint.publicKey,\n          metadata,\n          masterEdition,\n          instructionKey:\n            params.createMasterEditionInstructionKey ?? 'createMasterEdition',\n        })\n      )\n  );\n};\n"],"names":["Key","createNftOperation","useOperation","createNftOperationHandler","handle","operation","metaplex","uri","isMutable","maxSupply","mint","Keypair","generate","payer","identity","mintAuthority","updateAuthority","owner","publicKey","freezeAuthority","tokenProgram","associatedTokenProgram","confirmOptions","input","metadata","storage","downloadJson","e","data","resolveData","metadataPda","findMetadataPda","masterEditionPda","findMasterEditionV2Pda","builder","createNftBuilder","masterEdition","tokenAddress","getContext","signature","rpc","sendAndConfirmTransaction","undefined","associatedToken","transactionId","metadataCreators","properties","creators","filter","creator","address","map","PublicKey","share","verified","toBase58","name","symbol","sellerFeeBasisPoints","seller_fee_basis_points","collection","uses","params","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","TransactionBuilder","make","setFeePayer","setContext","add","createCreateMetadataAccountV2InstructionWithSigners","instructionKey","createMetadataInstructionKey","createCreateMasterEditionV3InstructionWithSigners","createMasterEditionInstructionKey"],"mappings":"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"}