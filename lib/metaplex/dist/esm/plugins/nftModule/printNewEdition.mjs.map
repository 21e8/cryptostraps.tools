{"version":3,"file":"printNewEdition.mjs","sources":["../../../../src/plugins/nftModule/printNewEdition.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Metaplex } from '@/Metaplex';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport {\n  createMintNewEditionFromMasterEditionViaTokenInstructionWithSigners,\n  createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners,\n  findEditionMarkerPda,\n  findEditionPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n  toOriginalEditionAccount,\n} from '@/programs';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  token,\n  toBigNumber,\n} from '@/types';\nimport { InstructionWithSigners, TransactionBuilder } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'PrintNewEditionOperation' as const;\nexport const printNewEditionOperation =\n  useOperation<PrintNewEditionOperation>(Key);\nexport type PrintNewEditionOperation = Operation<\n  typeof Key,\n  PrintNewEditionInput,\n  PrintNewEditionOutput\n>;\n\nexport type PrintNewEditionInput = PrintNewEditionSharedInput &\n  PrintNewEditionViaInput;\n\nexport type PrintNewEditionSharedInput = {\n  originalMint: PublicKey;\n  newMint?: Signer;\n  newMintAuthority?: Signer;\n  newUpdateAuthority?: PublicKey;\n  newOwner?: PublicKey;\n  newFreezeAuthority?: PublicKey;\n  payer?: Signer;\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type PrintNewEditionViaInput =\n  | {\n      via?: 'token';\n      originalTokenAccountOwner?: Signer;\n      originalTokenAccount?: PublicKey;\n    }\n  | {\n      via: 'vault';\n      vaultAuthority: Signer;\n      safetyDepositStore: PublicKey;\n      safetyDepositBox: PublicKey;\n      vault: PublicKey;\n      tokenVaultProgram?: PublicKey;\n    };\n\nexport type PrintNewEditionOutput = {\n  mint: Signer;\n  metadata: PublicKey;\n  edition: PublicKey;\n  associatedToken: PublicKey;\n  transactionId: string;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const printNewEditionOperationHandler: OperationHandler<PrintNewEditionOperation> =\n  {\n    handle: async (operation: PrintNewEditionOperation, metaplex: Metaplex) => {\n      const {\n        originalMint,\n        newMint = Keypair.generate(),\n        newMintAuthority = metaplex.identity(),\n        newUpdateAuthority = newMintAuthority.publicKey,\n        newOwner = newMintAuthority.publicKey,\n        newFreezeAuthority,\n        payer = metaplex.identity(),\n        tokenProgram,\n        associatedTokenProgram,\n        confirmOptions,\n      } = operation.input;\n\n      // Original NFT.\n      const originalMetadata = findMetadataPda(originalMint);\n      const originalEdition = findMasterEditionV2Pda(originalMint);\n      const originalEditionAccount = toOriginalEditionAccount(\n        await metaplex.rpc().getAccount(originalEdition),\n        `Ensure the provided mint address for the original NFT [${originalMint.toBase58()}] ` +\n          `is correct and that it has an associated OriginalEdition PDA.`\n      );\n\n      const edition = new BN(originalEditionAccount.data.supply, 'le').add(\n        new BN(1)\n      );\n      const originalEditionMarkPda = findEditionMarkerPda(\n        originalMint,\n        toBigNumber(edition)\n      );\n\n      // New NFT.\n      const newMetadata = findMetadataPda(newMint.publicKey);\n      const newEdition = findEditionPda(newMint.publicKey);\n      const sharedInput = {\n        edition,\n        newMint,\n        newMetadata,\n        newEdition,\n        newMintAuthority,\n        newUpdateAuthority,\n        newOwner,\n        newFreezeAuthority,\n        payer,\n        originalMetadata,\n        originalEdition,\n        originalEditionMarkPda,\n        tokenProgram,\n        associatedTokenProgram,\n      };\n\n      let transactionBuilder: TransactionBuilder<PrintNewEditionBuilderContext>;\n      if (operation.input.via === 'vault') {\n        transactionBuilder = await printNewEditionBuilder(metaplex, {\n          via: 'vault',\n          vaultAuthority: operation.input.vaultAuthority,\n          safetyDepositStore: operation.input.safetyDepositStore,\n          safetyDepositBox: operation.input.safetyDepositBox,\n          vault: operation.input.vault,\n          tokenVaultProgram: operation.input.tokenVaultProgram,\n          ...sharedInput,\n        });\n      } else {\n        const originalTokenAccountOwner =\n          operation.input.originalTokenAccountOwner ?? metaplex.identity();\n        const originalTokenAccount =\n          operation.input.originalTokenAccount ??\n          findAssociatedTokenAccountPda(\n            originalMint,\n            originalTokenAccountOwner.publicKey,\n            tokenProgram,\n            associatedTokenProgram\n          );\n\n        transactionBuilder = await printNewEditionBuilder(metaplex, {\n          via: 'token',\n          originalTokenAccountOwner,\n          originalTokenAccount,\n          ...sharedInput,\n        });\n      }\n\n      const { tokenAddress } = transactionBuilder.getContext();\n\n      const { signature } = await metaplex\n        .rpc()\n        .sendAndConfirmTransaction(\n          transactionBuilder,\n          undefined,\n          confirmOptions\n        );\n\n      return {\n        mint: newMint,\n        metadata: newMetadata,\n        edition: newEdition,\n        associatedToken: tokenAddress,\n        transactionId: signature,\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\ntype PrintNewEditionBuilderSharedParams = {\n  // Data.\n  edition: number | BN;\n\n  // New NFT.\n  newMint: Signer;\n  newMetadata: PublicKey;\n  newEdition: PublicKey;\n  newMintAuthority: Signer;\n  newUpdateAuthority: PublicKey;\n  newOwner: PublicKey;\n  newFreezeAuthority?: PublicKey;\n  payer: Signer;\n\n  // Master NFT.\n  originalMetadata: PublicKey;\n  originalEdition: PublicKey;\n  originalEditionMarkPda: PublicKey;\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Instruction keys.\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  printNewEditionInstructionKey?: string;\n};\n\nexport type PrintNewEditionBuilderParams = PrintNewEditionBuilderSharedParams &\n  (\n    | {\n        via: 'token';\n        originalTokenAccountOwner: Signer;\n        originalTokenAccount: PublicKey;\n      }\n    | {\n        via: 'vault';\n        vaultAuthority: Signer;\n        safetyDepositStore: PublicKey;\n        safetyDepositBox: PublicKey;\n        vault: PublicKey;\n        tokenVaultProgram?: PublicKey;\n      }\n  );\n\nexport type PrintNewEditionBuilderContext = {\n  tokenAddress: PublicKey;\n};\n\nexport const printNewEditionBuilder = async (\n  metaplex: Metaplex,\n  params: PrintNewEditionBuilderParams\n): Promise<TransactionBuilder<PrintNewEditionBuilderContext>> => {\n  const {\n    // Data.\n    edition,\n\n    // New NFT.\n    newMint,\n    newMetadata,\n    newEdition,\n    newMintAuthority,\n    newUpdateAuthority,\n    newOwner,\n    newFreezeAuthority,\n    payer,\n\n    // Master NFT.\n    originalMetadata,\n    originalEdition,\n    originalEditionMarkPda,\n\n    // Programs.\n    tokenProgram,\n    associatedTokenProgram,\n\n    // Instruction keys.\n    printNewEditionInstructionKey = 'printNewEdition',\n  } = params;\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint({\n      decimals: 0,\n      initialSupply: token(1),\n      mint: newMint,\n      mintAuthority: newMintAuthority,\n      freezeAuthority: newFreezeAuthority ?? null,\n      owner: newOwner,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n      initializeMintInstructionKey: params.initializeMintInstructionKey,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey,\n      createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,\n      initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n      mintTokensInstructionKey: params.mintTokensInstructionKey,\n    });\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n\n  let printNewEditionInstructionWithSigners: InstructionWithSigners;\n  if (params.via === 'vault') {\n    printNewEditionInstructionWithSigners =\n      createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners({\n        edition,\n        newMetadata,\n        newEdition,\n        masterEdition: originalEdition,\n        newMint,\n        editionMarkPda: originalEditionMarkPda,\n        newMintAuthority,\n        payer,\n        vaultAuthority: params.vaultAuthority,\n        safetyDepositStore: params.safetyDepositStore,\n        safetyDepositBox: params.safetyDepositBox,\n        vault: params.vault,\n        newMetadataUpdateAuthority: newUpdateAuthority,\n        metadata: originalMetadata,\n        tokenVaultProgram: params.tokenVaultProgram,\n        instructionKey: printNewEditionInstructionKey,\n      });\n  } else {\n    printNewEditionInstructionWithSigners =\n      createMintNewEditionFromMasterEditionViaTokenInstructionWithSigners({\n        edition,\n        newMetadata,\n        newEdition,\n        masterEdition: originalEdition,\n        newMint,\n        editionMarkPda: originalEditionMarkPda,\n        newMintAuthority,\n        payer,\n        tokenAccountOwner: params.originalTokenAccountOwner,\n        tokenAccount: params.originalTokenAccount,\n        newMetadataUpdateAuthority: newUpdateAuthority,\n        metadata: originalMetadata,\n        instructionKey: printNewEditionInstructionKey,\n      });\n  }\n\n  return (\n    TransactionBuilder.make<PrintNewEditionBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ tokenAddress })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(tokenWithMintBuilder)\n\n      // Mint new edition.\n      .add(printNewEditionInstructionWithSigners)\n  );\n};\n"],"names":["Key","printNewEditionOperation","useOperation","printNewEditionOperationHandler","handle","operation","metaplex","originalMint","newMint","Keypair","generate","newMintAuthority","identity","newUpdateAuthority","publicKey","newOwner","newFreezeAuthority","payer","tokenProgram","associatedTokenProgram","confirmOptions","input","originalMetadata","findMetadataPda","originalEdition","findMasterEditionV2Pda","originalEditionAccount","toOriginalEditionAccount","rpc","getAccount","toBase58","edition","BN","data","supply","add","originalEditionMarkPda","findEditionMarkerPda","toBigNumber","newMetadata","newEdition","findEditionPda","sharedInput","transactionBuilder","via","printNewEditionBuilder","vaultAuthority","safetyDepositStore","safetyDepositBox","vault","tokenVaultProgram","originalTokenAccountOwner","originalTokenAccount","findAssociatedTokenAccountPda","tokenAddress","getContext","signature","sendAndConfirmTransaction","undefined","mint","metadata","associatedToken","transactionId","params","printNewEditionInstructionKey","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","printNewEditionInstructionWithSigners","createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners","masterEdition","editionMarkPda","newMetadataUpdateAuthority","instructionKey","createMintNewEditionFromMasterEditionViaTokenInstructionWithSigners","tokenAccountOwner","tokenAccount","TransactionBuilder","make","setFeePayer","setContext"],"mappings":"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"}