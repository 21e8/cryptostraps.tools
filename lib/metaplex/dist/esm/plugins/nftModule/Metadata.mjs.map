{"version":3,"file":"Metadata.mjs","sources":["../../../../src/plugins/nftModule/Metadata.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  Collection,\n  Creator,\n  TokenStandard,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { amount, Pda } from '@/types';\nimport { JsonMetadata } from '../nftModule';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport { findMetadataPda, MetadataAccount } from '@/programs';\nimport {\n  toMint,\n  toTokenWithMint,\n  Mint,\n  MintAccount,\n  TokenAccount,\n  TokenWithMint,\n} from '../tokenModule';\n\nexport type Metadata = Readonly<{\n  model: 'metadata';\n  address: Pda;\n  mintAddress: PublicKey;\n  updateAuthorityAddress: PublicKey;\n  json: Option<JsonMetadata>;\n  jsonLoaded: boolean;\n  name: string;\n  symbol: string;\n  uri: string;\n  isMutable: boolean;\n  primarySaleHappened: boolean;\n  sellerFeeBasisPoints: number;\n  editionNonce: Option<number>;\n  creators: Creator[];\n  tokenStandard: Option<TokenStandard>;\n  collection: Option<Collection>;\n  uses: Option<Uses>;\n}>;\n\nexport const isMetadata = (value: any): value is Metadata =>\n  typeof value === 'object' && value.model === 'metadata';\n\nexport const assertMetadata = (value: any): asserts value is Metadata =>\n  assert(isMetadata(value), `Expected Metadata model`);\n\nexport const toMetadata = (\n  account: MetadataAccount,\n  json?: Option<JsonMetadata>\n): Metadata => ({\n  model: 'metadata',\n  address: findMetadataPda(account.data.mint),\n  mintAddress: account.data.mint,\n  updateAuthorityAddress: account.data.updateAuthority,\n  json: json ?? null,\n  jsonLoaded: json !== undefined,\n  name: removeEmptyChars(account.data.data.name),\n  symbol: removeEmptyChars(account.data.data.symbol),\n  uri: removeEmptyChars(account.data.data.uri),\n  isMutable: account.data.isMutable,\n  primarySaleHappened: account.data.primarySaleHappened,\n  sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n  editionNonce: account.data.editionNonce,\n  creators: account.data.data.creators ?? [],\n  tokenStandard: account.data.tokenStandard,\n  collection: account.data.collection,\n  uses: account.data.uses,\n});\n\nexport type MintWithMetadata = Omit<Mint, 'model'> &\n  Readonly<{\n    model: 'mintWithMetadata';\n    metadata: Metadata;\n  }>;\n\nexport const isMintWithMetadata = (value: any): value is MintWithMetadata =>\n  typeof value === 'object' && value.model === 'mintWithMetadata';\n\nexport const assertMintWithMetadata = (\n  value: any\n): asserts value is MintWithMetadata =>\n  assert(isMintWithMetadata(value), `Expected MintWithMetadata model`);\n\nexport const toMintWithMetadata = (\n  mintAccount: MintAccount,\n  metadataModel: Metadata\n): MintWithMetadata => {\n  const mint = toMint(mintAccount);\n  const currency = {\n    ...mint.currency,\n    symbol: metadataModel.symbol || 'Token',\n  };\n\n  return {\n    ...mint,\n    model: 'mintWithMetadata',\n    metadata: metadataModel,\n    currency,\n    supply: amount(mint.supply.basisPoints, currency),\n  };\n};\n\nexport type TokenWithMetadata = Omit<TokenWithMint, 'model'> &\n  Readonly<{\n    model: 'tokenWithMetadata';\n    metadata: Metadata;\n  }>;\n\nexport const isTokenWithMetadata = (value: any): value is TokenWithMetadata =>\n  typeof value === 'object' && value.model === 'tokenWithMetadata';\n\nexport const assertTokenWithMetadata = (\n  value: any\n): asserts value is TokenWithMetadata =>\n  assert(isTokenWithMetadata(value), `Expected TokenWithMetadata model`);\n\nexport const toTokenWithMetadata = (\n  tokenAccount: TokenAccount,\n  mintModel: Mint,\n  metadataModel: Metadata\n): TokenWithMetadata => {\n  const token = toTokenWithMint(tokenAccount, mintModel);\n  const currency = {\n    ...token.mint.currency,\n    symbol: metadataModel.symbol || 'Token',\n  };\n\n  return {\n    ...token,\n    model: 'tokenWithMetadata',\n    mint: {\n      ...token.mint,\n      currency,\n      supply: amount(token.mint.supply.basisPoints, currency),\n    },\n    metadata: metadataModel,\n    amount: amount(token.amount.basisPoints, currency),\n    delegateAmount: amount(token.delegateAmount.basisPoints, currency),\n  };\n};\n"],"names":["isMetadata","value","model","assertMetadata","assert","toMetadata","account","json","address","findMetadataPda","data","mint","mintAddress","updateAuthorityAddress","updateAuthority","jsonLoaded","undefined","name","removeEmptyChars","symbol","uri","isMutable","primarySaleHappened","sellerFeeBasisPoints","editionNonce","creators","tokenStandard","collection","uses","isMintWithMetadata","assertMintWithMetadata","toMintWithMetadata","mintAccount","metadataModel","toMint","currency","metadata","supply","amount","basisPoints","isTokenWithMetadata","assertTokenWithMetadata","toTokenWithMetadata","tokenAccount","mintModel","token","toTokenWithMint","delegateAmount"],"mappings":"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"}