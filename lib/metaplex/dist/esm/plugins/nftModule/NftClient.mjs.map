{"version":3,"file":"NftClient.mjs","sources":["../../../../src/plugins/nftModule/NftClient.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { Nft } from './Nft';\nimport { findNftByMintOperation } from './findNftByMint';\nimport { findNftsByMintListOperation } from './findNftsByMintList';\nimport { findNftsByOwnerOperation } from './findNftsByOwner';\nimport { findNftsByCreatorOperation } from './findNftsByCreator';\nimport { findNftsByCandyMachineOperation } from './findNftsByCandyMachine';\nimport {\n  UploadMetadataInput,\n  uploadMetadataOperation,\n  UploadMetadataOutput,\n} from './uploadMetadata';\nimport {\n  CreateNftInput,\n  createNftOperation,\n  CreateNftOutput,\n} from './createNft';\nimport {\n  UpdateNftInput,\n  updateNftOperation,\n  UpdateNftOutput,\n} from './updateNft';\nimport {\n  printNewEditionOperation,\n  PrintNewEditionOutput,\n  PrintNewEditionSharedInput,\n  PrintNewEditionViaInput,\n} from './printNewEdition';\nimport { Option, removeEmptyChars, Task } from '@/utils';\nimport { JsonMetadata } from './JsonMetadata';\nimport { findMintWithMetadataByAddressOperation } from './findMintWithMetadataByAddress';\nimport { findMintWithMetadataByMetadataOperation } from './findMintWithMetadataByMetadata';\nimport { findTokenWithMetadataByAddressOperation } from './findTokenWithMetadataByAddress';\nimport { findTokenWithMetadataByMetadataOperation } from './findTokenWithMetadataByMetadata';\nimport { findTokenWithMetadataByMintOperation } from './findTokenWithMetadataByMint';\n\nexport class NftClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  findByMint(mint: PublicKey): Promise<Nft> {\n    return this.metaplex.operations().execute(findNftByMintOperation(mint));\n  }\n\n  findAllByMintList(mints: PublicKey[]): Promise<(Nft | null)[]> {\n    return this.metaplex\n      .operations()\n      .execute(findNftsByMintListOperation(mints));\n  }\n\n  findAllByOwner(owner: PublicKey): Promise<Nft[]> {\n    return this.metaplex.operations().execute(findNftsByOwnerOperation(owner));\n  }\n\n  findAllByCreator(creator: PublicKey, position: number = 1): Promise<Nft[]> {\n    return this.metaplex\n      .operations()\n      .execute(findNftsByCreatorOperation({ creator, position }));\n  }\n\n  findAllByCandyMachine(\n    candyMachine: PublicKey,\n    version?: 1 | 2\n  ): Promise<Nft[]> {\n    return this.metaplex\n      .operations()\n      .execute(findNftsByCandyMachineOperation({ candyMachine, version }));\n  }\n\n  findMintWithMetadataByAddress(\n    address: PublicKey,\n    options: {\n      loadJsonMetadata?: boolean;\n      commitment?: Commitment;\n    } = {}\n  ) {\n    return this.metaplex.operations().getTask(\n      findMintWithMetadataByAddressOperation({\n        address,\n        ...options,\n      })\n    );\n  }\n\n  findMintWithMetadataByMetadata(\n    metadataAddress: PublicKey,\n    options: {\n      loadJsonMetadata?: boolean;\n      commitment?: Commitment;\n    } = {}\n  ) {\n    return this.metaplex.operations().getTask(\n      findMintWithMetadataByMetadataOperation({\n        metadataAddress,\n        ...options,\n      })\n    );\n  }\n\n  findTokenWithMetadataByAddress(\n    address: PublicKey,\n    options: {\n      loadJsonMetadata?: boolean;\n      commitment?: Commitment;\n    } = {}\n  ) {\n    return this.metaplex.operations().getTask(\n      findTokenWithMetadataByAddressOperation({\n        address,\n        ...options,\n      })\n    );\n  }\n\n  findTokenWithMetadataByMetadata(\n    metadataAddress: PublicKey,\n    ownerAddress: PublicKey,\n    options: {\n      loadJsonMetadata?: boolean;\n      commitment?: Commitment;\n    } = {}\n  ) {\n    return this.metaplex.operations().getTask(\n      findTokenWithMetadataByMetadataOperation({\n        metadataAddress,\n        ownerAddress,\n        ...options,\n      })\n    );\n  }\n\n  findTokenWithMetadataByMint(\n    mintAddress: PublicKey,\n    ownerAddress: PublicKey,\n    options: {\n      loadJsonMetadata?: boolean;\n      commitment?: Commitment;\n    } = {}\n  ) {\n    return this.metaplex.operations().getTask(\n      findTokenWithMetadataByMintOperation({\n        mintAddress,\n        ownerAddress,\n        ...options,\n      })\n    );\n  }\n\n  uploadMetadata(input: UploadMetadataInput): Promise<UploadMetadataOutput> {\n    return this.metaplex.operations().execute(uploadMetadataOperation(input));\n  }\n\n  async create(input: CreateNftInput): Promise<{ nft: Nft } & CreateNftOutput> {\n    const operation = createNftOperation(input);\n    const createNftOutput = await this.metaplex.operations().execute(operation);\n    const nft = await this.findByMint(createNftOutput.mint.publicKey);\n\n    return { ...createNftOutput, nft };\n  }\n\n  async update(\n    nft: Nft,\n    input: Omit<UpdateNftInput, 'nft'>\n  ): Promise<{ nft: Nft } & UpdateNftOutput> {\n    const operation = updateNftOperation({ ...input, nft });\n    const updateNftOutput = await this.metaplex.operations().execute(operation);\n    const updatedNft = await this.findByMint(nft.mint);\n\n    return { ...updateNftOutput, nft: updatedNft };\n  }\n\n  async printNewEdition(\n    originalMint: PublicKey,\n    input: Omit<PrintNewEditionSharedInput, 'originalMint'> &\n      PrintNewEditionViaInput = {}\n  ): Promise<{ nft: Nft } & PrintNewEditionOutput> {\n    const operation = printNewEditionOperation({ originalMint, ...input });\n    const printNewEditionOutput = await this.metaplex\n      .operations()\n      .execute(operation);\n    const nft = await this.findByMint(printNewEditionOutput.mint.publicKey);\n\n    return { ...printNewEditionOutput, nft };\n  }\n\n  loadJsonMetadata<\n    T extends { uri: string; json: Option<JsonMetadata>; jsonLoaded: boolean }\n  >(metadata: T): Task<T & { jsonLoaded: true }> {\n    return new Task(async ({ signal }) => {\n      const json = await this.metaplex\n        .storage()\n        .downloadJson<JsonMetadata>(removeEmptyChars(metadata.uri), { signal });\n      return { ...metadata, json, jsonLoaded: true };\n    });\n  }\n}\n"],"names":["NftClient","constructor","metaplex","findByMint","mint","operations","execute","findNftByMintOperation","findAllByMintList","mints","findNftsByMintListOperation","findAllByOwner","owner","findNftsByOwnerOperation","findAllByCreator","creator","position","findNftsByCreatorOperation","findAllByCandyMachine","candyMachine","version","findNftsByCandyMachineOperation","findMintWithMetadataByAddress","address","options","getTask","findMintWithMetadataByAddressOperation","findMintWithMetadataByMetadata","metadataAddress","findMintWithMetadataByMetadataOperation","findTokenWithMetadataByAddress","findTokenWithMetadataByAddressOperation","findTokenWithMetadataByMetadata","ownerAddress","findTokenWithMetadataByMetadataOperation","findTokenWithMetadataByMint","mintAddress","findTokenWithMetadataByMintOperation","uploadMetadata","input","uploadMetadataOperation","create","operation","createNftOperation","createNftOutput","nft","publicKey","update","updateNftOperation","updateNftOutput","updatedNft","printNewEdition","originalMint","printNewEditionOperation","printNewEditionOutput","loadJsonMetadata","metadata","Task","signal","json","storage","downloadJson","removeEmptyChars","uri","jsonLoaded"],"mappings":";;;;;;;;;;;;;;;;;AAqCO,MAAMA,SAAN,CAAgB;EACrBC,WAAW,CAAoBC,QAApB,EAAwC;IAAA,IAApBA,CAAAA,QAAoB,GAApBA,QAAoB,CAAA;AAAE,GAAA;;EAErDC,UAAU,CAACC,IAAD,EAAgC;IACxC,OAAO,IAAA,CAAKF,QAAL,CAAcG,UAAd,EAAA,CAA2BC,OAA3B,CAAmCC,sBAAsB,CAACH,IAAD,CAAzD,CAAP,CAAA;AACD,GAAA;;EAEDI,iBAAiB,CAACC,KAAD,EAA8C;IAC7D,OAAO,IAAA,CAAKP,QAAL,CACJG,UADI,EAAA,CAEJC,OAFI,CAEII,2BAA2B,CAACD,KAAD,CAF/B,CAAP,CAAA;AAGD,GAAA;;EAEDE,cAAc,CAACC,KAAD,EAAmC;IAC/C,OAAO,IAAA,CAAKV,QAAL,CAAcG,UAAd,EAAA,CAA2BC,OAA3B,CAAmCO,wBAAwB,CAACD,KAAD,CAA3D,CAAP,CAAA;AACD,GAAA;;AAEDE,EAAAA,gBAAgB,CAACC,OAAD,EAAqBC,QAAgB,GAAG,CAAxC,EAA2D;IACzE,OAAO,IAAA,CAAKd,QAAL,CACJG,UADI,GAEJC,OAFI,CAEIW,0BAA0B,CAAC;MAAEF,OAAF;AAAWC,MAAAA,QAAAA;AAAX,KAAD,CAF9B,CAAP,CAAA;AAGD,GAAA;;AAEDE,EAAAA,qBAAqB,CACnBC,YADmB,EAEnBC,OAFmB,EAGH;IAChB,OAAO,IAAA,CAAKlB,QAAL,CACJG,UADI,GAEJC,OAFI,CAEIe,+BAA+B,CAAC;MAAEF,YAAF;AAAgBC,MAAAA,OAAAA;AAAhB,KAAD,CAFnC,CAAP,CAAA;AAGD,GAAA;;AAEDE,EAAAA,6BAA6B,CAC3BC,OAD2B,EAE3BC,OAGC,GAAG,EALuB,EAM3B;IACA,OAAO,IAAA,CAAKtB,QAAL,CAAcG,UAAd,GAA2BoB,OAA3B,CACLC,sCAAsC,CAAC;MACrCH,OADqC;MAErC,GAAGC,OAAAA;AAFkC,KAAD,CADjC,CAAP,CAAA;AAMD,GAAA;;AAEDG,EAAAA,8BAA8B,CAC5BC,eAD4B,EAE5BJ,OAGC,GAAG,EALwB,EAM5B;IACA,OAAO,IAAA,CAAKtB,QAAL,CAAcG,UAAd,GAA2BoB,OAA3B,CACLI,uCAAuC,CAAC;MACtCD,eADsC;MAEtC,GAAGJ,OAAAA;AAFmC,KAAD,CADlC,CAAP,CAAA;AAMD,GAAA;;AAEDM,EAAAA,8BAA8B,CAC5BP,OAD4B,EAE5BC,OAGC,GAAG,EALwB,EAM5B;IACA,OAAO,IAAA,CAAKtB,QAAL,CAAcG,UAAd,GAA2BoB,OAA3B,CACLM,uCAAuC,CAAC;MACtCR,OADsC;MAEtC,GAAGC,OAAAA;AAFmC,KAAD,CADlC,CAAP,CAAA;AAMD,GAAA;;EAEDQ,+BAA+B,CAC7BJ,eAD6B,EAE7BK,YAF6B,EAG7BT,OAGC,GAAG,EANyB,EAO7B;IACA,OAAO,IAAA,CAAKtB,QAAL,CAAcG,UAAd,GAA2BoB,OAA3B,CACLS,wCAAwC,CAAC;MACvCN,eADuC;MAEvCK,YAFuC;MAGvC,GAAGT,OAAAA;AAHoC,KAAD,CADnC,CAAP,CAAA;AAOD,GAAA;;EAEDW,2BAA2B,CACzBC,WADyB,EAEzBH,YAFyB,EAGzBT,OAGC,GAAG,EANqB,EAOzB;IACA,OAAO,IAAA,CAAKtB,QAAL,CAAcG,UAAd,GAA2BoB,OAA3B,CACLY,oCAAoC,CAAC;MACnCD,WADmC;MAEnCH,YAFmC;MAGnC,GAAGT,OAAAA;AAHgC,KAAD,CAD/B,CAAP,CAAA;AAOD,GAAA;;EAEDc,cAAc,CAACC,KAAD,EAA4D;IACxE,OAAO,IAAA,CAAKrC,QAAL,CAAcG,UAAd,EAAA,CAA2BC,OAA3B,CAAmCkC,uBAAuB,CAACD,KAAD,CAA1D,CAAP,CAAA;AACD,GAAA;;EAEW,MAANE,MAAM,CAACF,KAAD,EAAiE;AAC3E,IAAA,MAAMG,SAAS,GAAGC,kBAAkB,CAACJ,KAAD,CAApC,CAAA;IACA,MAAMK,eAAe,GAAG,MAAM,IAAK1C,CAAAA,QAAL,CAAcG,UAAd,EAA2BC,CAAAA,OAA3B,CAAmCoC,SAAnC,CAA9B,CAAA;IACA,MAAMG,GAAG,GAAG,MAAM,IAAK1C,CAAAA,UAAL,CAAgByC,eAAe,CAACxC,IAAhB,CAAqB0C,SAArC,CAAlB,CAAA;IAEA,OAAO,EAAE,GAAGF,eAAL;AAAsBC,MAAAA,GAAAA;KAA7B,CAAA;AACD,GAAA;;AAEW,EAAA,MAANE,MAAM,CACVF,GADU,EAEVN,KAFU,EAG+B;AACzC,IAAA,MAAMG,SAAS,GAAGM,kBAAkB,CAAC,EAAE,GAAGT,KAAL;AAAYM,MAAAA,GAAAA;AAAZ,KAAD,CAApC,CAAA;IACA,MAAMI,eAAe,GAAG,MAAM,IAAK/C,CAAAA,QAAL,CAAcG,UAAd,EAA2BC,CAAAA,OAA3B,CAAmCoC,SAAnC,CAA9B,CAAA;IACA,MAAMQ,UAAU,GAAG,MAAM,IAAA,CAAK/C,UAAL,CAAgB0C,GAAG,CAACzC,IAApB,CAAzB,CAAA;IAEA,OAAO,EAAE,GAAG6C,eAAL;AAAsBJ,MAAAA,GAAG,EAAEK,UAAAA;KAAlC,CAAA;AACD,GAAA;;AAEoB,EAAA,MAAfC,eAAe,CACnBC,YADmB,EAEnBb,KACyB,GAAG,EAHT,EAI4B;IAC/C,MAAMG,SAAS,GAAGW,wBAAwB,CAAC;MAAED,YAAF;MAAgB,GAAGb,KAAAA;AAAnB,KAAD,CAA1C,CAAA;IACA,MAAMe,qBAAqB,GAAG,MAAM,IAAKpD,CAAAA,QAAL,CACjCG,UADiC,EAEjCC,CAAAA,OAFiC,CAEzBoC,SAFyB,CAApC,CAAA;IAGA,MAAMG,GAAG,GAAG,MAAM,IAAK1C,CAAAA,UAAL,CAAgBmD,qBAAqB,CAAClD,IAAtB,CAA2B0C,SAA3C,CAAlB,CAAA;IAEA,OAAO,EAAE,GAAGQ,qBAAL;AAA4BT,MAAAA,GAAAA;KAAnC,CAAA;AACD,GAAA;;EAEDU,gBAAgB,CAEdC,QAFc,EAE+B;IAC7C,OAAO,IAAIC,IAAJ,CAAS,OAAO;AAAEC,MAAAA,MAAAA;AAAF,KAAP,KAAsB;AACpC,MAAA,MAAMC,IAAI,GAAG,MAAM,IAAKzD,CAAAA,QAAL,CAChB0D,OADgB,EAAA,CAEhBC,YAFgB,CAEWC,gBAAgB,CAACN,QAAQ,CAACO,GAAV,CAF3B,EAE2C;AAAEL,QAAAA,MAAAA;AAAF,OAF3C,CAAnB,CAAA;MAGA,OAAO,EAAE,GAAGF,QAAL;QAAeG,IAAf;AAAqBK,QAAAA,UAAU,EAAE,IAAA;OAAxC,CAAA;AACD,KALM,CAAP,CAAA;AAMD,GAAA;;AA7JoB;;;;"}