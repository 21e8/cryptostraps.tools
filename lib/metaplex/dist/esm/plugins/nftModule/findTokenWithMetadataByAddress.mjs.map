{"version":3,"file":"findTokenWithMetadataByAddress.mjs","sources":["../../../../src/plugins/nftModule/findTokenWithMetadataByAddress.ts"],"sourcesContent":["import type { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, useOperation, OperationHandler } from '@/types';\nimport { toMetadata, toTokenWithMetadata, TokenWithMetadata } from './Metadata';\nimport {\n  toMint,\n  toTokenWithMint,\n  TokenWithMint,\n  toMintAccount,\n  toTokenAccount,\n} from '../tokenModule';\nimport { findMetadataPda, parseMetadataAccount } from '@/programs';\nimport { DisposableScope } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindTokenWithMetadataByAddressOperation' as const;\nexport const findTokenWithMetadataByAddressOperation =\n  useOperation<FindTokenWithMetadataByAddressOperation>(Key);\nexport type FindTokenWithMetadataByAddressOperation = Operation<\n  typeof Key,\n  FindTokenWithMetadataByAddressInput,\n  TokenWithMetadata | TokenWithMint\n>;\n\nexport type FindTokenWithMetadataByAddressInput = {\n  address: PublicKey;\n  commitment?: Commitment;\n  loadJsonMetadata?: boolean; // Default: true\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findTokenWithMetadataByAddressOperationHandler: OperationHandler<FindTokenWithMetadataByAddressOperation> =\n  {\n    handle: async (\n      operation: FindTokenWithMetadataByAddressOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<TokenWithMetadata | TokenWithMint> => {\n      const { address, commitment, loadJsonMetadata = true } = operation.input;\n\n      const tokenAccount = toTokenAccount(\n        await metaplex.rpc().getAccount(address, commitment)\n      );\n\n      const mintAddress = tokenAccount.data.mint;\n      const metadataAddress = findMetadataPda(mintAddress);\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts([mintAddress, metadataAddress], commitment);\n\n      const mintAccount = toMintAccount(accounts[0]);\n      const metadataAccount = parseMetadataAccount(accounts[1]);\n      const mintModel = toMint(mintAccount);\n\n      if (!metadataAccount.exists) {\n        return toTokenWithMint(tokenAccount, mintModel);\n      }\n\n      let metadataModel = toMetadata(metadataAccount);\n      if (loadJsonMetadata) {\n        metadataModel = await metaplex\n          .nfts()\n          .loadJsonMetadata(metadataModel)\n          .run(scope);\n      }\n\n      return toTokenWithMetadata(tokenAccount, mintModel, metadataModel);\n    },\n  };\n"],"names":["Key","findTokenWithMetadataByAddressOperation","useOperation","findTokenWithMetadataByAddressOperationHandler","handle","operation","metaplex","scope","address","commitment","loadJsonMetadata","input","tokenAccount","toTokenAccount","rpc","getAccount","mintAddress","data","mint","metadataAddress","findMetadataPda","accounts","getMultipleAccounts","mintAccount","toMintAccount","metadataAccount","parseMetadataAccount","mintModel","toMint","exists","toTokenWithMint","metadataModel","toMetadata","nfts","run","toTokenWithMetadata"],"mappings":";;;;;;;;AAcA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,yCAAZ,CAAA;MACaC,uCAAuC,GAClDC,YAAY,CAA0CF,GAA1C,EADP;AAcP;AACA;AACA;AAEO,MAAMG,8CAAyG,GACpH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIyC;IAC/C,MAAM;MAAEC,OAAF;MAAWC,UAAX;AAAuBC,MAAAA,gBAAgB,GAAG,IAAA;KAASL,GAAAA,SAAS,CAACM,KAAnE,CAAA;AAEA,IAAA,MAAMC,YAAY,GAAGC,cAAc,CACjC,MAAMP,QAAQ,CAACQ,GAAT,EAAA,CAAeC,UAAf,CAA0BP,OAA1B,EAAmCC,UAAnC,CAD2B,CAAnC,CAAA;AAIA,IAAA,MAAMO,WAAW,GAAGJ,YAAY,CAACK,IAAb,CAAkBC,IAAtC,CAAA;AACA,IAAA,MAAMC,eAAe,GAAGC,eAAe,CAACJ,WAAD,CAAvC,CAAA;AACA,IAAA,MAAMK,QAAQ,GAAG,MAAMf,QAAQ,CAC5BQ,GADoB,EAEpBQ,CAAAA,mBAFoB,CAEA,CAACN,WAAD,EAAcG,eAAd,CAFA,EAEgCV,UAFhC,CAAvB,CAAA;IAIA,MAAMc,WAAW,GAAGC,aAAa,CAACH,QAAQ,CAAC,CAAD,CAAT,CAAjC,CAAA;IACA,MAAMI,eAAe,GAAGC,oBAAoB,CAACL,QAAQ,CAAC,CAAD,CAAT,CAA5C,CAAA;AACA,IAAA,MAAMM,SAAS,GAAGC,MAAM,CAACL,WAAD,CAAxB,CAAA;;AAEA,IAAA,IAAI,CAACE,eAAe,CAACI,MAArB,EAA6B;AAC3B,MAAA,OAAOC,eAAe,CAAClB,YAAD,EAAee,SAAf,CAAtB,CAAA;AACD,KAAA;;AAED,IAAA,IAAII,aAAa,GAAGC,UAAU,CAACP,eAAD,CAA9B,CAAA;;AACA,IAAA,IAAIf,gBAAJ,EAAsB;AACpBqB,MAAAA,aAAa,GAAG,MAAMzB,QAAQ,CAC3B2B,IADmB,EAAA,CAEnBvB,gBAFmB,CAEFqB,aAFE,CAAA,CAGnBG,GAHmB,CAGf3B,KAHe,CAAtB,CAAA;AAID,KAAA;;AAED,IAAA,OAAO4B,mBAAmB,CAACvB,YAAD,EAAee,SAAf,EAA0BI,aAA1B,CAA1B,CAAA;AACD,GAAA;AAnCH;;;;"}