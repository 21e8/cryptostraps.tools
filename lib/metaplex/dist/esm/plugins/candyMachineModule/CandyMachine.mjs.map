{"version":3,"file":"CandyMachine.mjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachine.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  CandyMachineData,\n  EndSettingType,\n  WhitelistMintMode,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  Amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n  UnparsedAccount,\n} from '@/types';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport {\n  countCandyMachineItems,\n  getCandyMachineUuidFromAddress,\n  parseCandyMachineItems,\n} from './helpers';\nimport { CandyMachineAccount } from './accounts';\nimport { Creator } from '@/types/Creator';\n\n// -----------------\n// Model\n// -----------------\n\nexport type CandyMachine = Readonly<{\n  model: 'candyMachine';\n  address: PublicKey;\n  authorityAddress: PublicKey;\n  walletAddress: PublicKey; // SOL treasury OR token account for the tokenMintAddress.\n  tokenMintAddress: Option<PublicKey>;\n  uuid: string;\n  price: Amount;\n  symbol: string;\n  sellerFeeBasisPoints: number;\n  isMutable: boolean;\n  retainAuthority: boolean;\n  goLiveDate: Option<DateTime>;\n  maxEditionSupply: BigNumber;\n  items: CandyMachineItem[];\n  itemsAvailable: BigNumber;\n  itemsMinted: BigNumber;\n  itemsRemaining: BigNumber;\n  itemsLoaded: BigNumber;\n  isFullyLoaded: boolean;\n  endSettings: Option<EndSettings>;\n  hiddenSettings: Option<HiddenSettings>;\n  whitelistMintSettings: Option<WhitelistMintSettings>;\n  gatekeeper: Option<Gatekeeper>;\n  creators: Creator[];\n}>;\n\nexport type CandyMachineItem = Readonly<{\n  name: string;\n  uri: string;\n}>;\n\nexport type EndSettings =\n  | {\n      endSettingType: EndSettingType.Amount;\n      number: BigNumber;\n    }\n  | {\n      endSettingType: EndSettingType.Date;\n      date: DateTime;\n    };\n\nexport type HiddenSettings = {\n  name: string;\n  uri: string;\n  hash: number[];\n};\n\nexport type WhitelistMintSettings = {\n  mode: WhitelistMintMode;\n  mint: PublicKey;\n  presale: boolean;\n  discountPrice: Option<Amount>;\n};\n\nexport type Gatekeeper = {\n  network: PublicKey;\n  expireOnUse: boolean;\n};\n\n// -----------------\n// Program to Model\n// -----------------\n\nexport const isCandyMachine = (value: any): value is CandyMachine =>\n  typeof value === 'object' && value.model === 'candyMachine';\n\nexport const assertCandyMachine = (value: any): asserts value is CandyMachine =>\n  assert(isCandyMachine(value), 'Expected CandyMachine type');\n\nexport const toCandyMachine = (\n  account: CandyMachineAccount,\n  unparsedAccount: UnparsedAccount\n): CandyMachine => {\n  const itemsAvailable = toBigNumber(account.data.data.itemsAvailable);\n  const itemsMinted = toBigNumber(account.data.itemsRedeemed);\n\n  const endSettings = account.data.data.endSettings;\n  const hiddenSettings = account.data.data.hiddenSettings;\n  const whitelistMintSettings = account.data.data.whitelistMintSettings;\n  const gatekeeper = account.data.data.gatekeeper;\n\n  const rawData = unparsedAccount.data;\n  const itemsLoaded = hiddenSettings\n    ? toBigNumber(0)\n    : countCandyMachineItems(rawData);\n  const items = hiddenSettings ? [] : parseCandyMachineItems(rawData);\n\n  return {\n    model: 'candyMachine',\n    address: account.publicKey,\n    authorityAddress: account.data.authority,\n    walletAddress: account.data.wallet,\n    tokenMintAddress: account.data.tokenMint,\n    uuid: account.data.data.uuid,\n    price: lamports(account.data.data.price),\n    symbol: removeEmptyChars(account.data.data.symbol),\n    sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n    isMutable: account.data.data.isMutable,\n    retainAuthority: account.data.data.retainAuthority,\n    goLiveDate: toOptionDateTime(account.data.data.goLiveDate),\n    maxEditionSupply: toBigNumber(account.data.data.maxSupply),\n    items,\n    itemsAvailable,\n    itemsMinted,\n    itemsRemaining: toBigNumber(itemsAvailable.sub(itemsMinted)),\n    itemsLoaded,\n    isFullyLoaded: itemsAvailable.lte(itemsLoaded),\n    endSettings: endSettings\n      ? endSettings.endSettingType === EndSettingType.Date\n        ? {\n            endSettingType: EndSettingType.Date,\n            date: toDateTime(endSettings.number),\n          }\n        : {\n            endSettingType: EndSettingType.Amount,\n            number: toBigNumber(endSettings.number),\n          }\n      : null,\n    hiddenSettings,\n    whitelistMintSettings: whitelistMintSettings\n      ? {\n          ...whitelistMintSettings,\n          discountPrice: whitelistMintSettings.discountPrice\n            ? lamports(whitelistMintSettings.discountPrice)\n            : null,\n        }\n      : null,\n    gatekeeper: gatekeeper\n      ? {\n          ...gatekeeper,\n          network: gatekeeper.gatekeeperNetwork,\n        }\n      : null,\n    creators: account.data.data.creators,\n  };\n};\n\n// -----------------\n// Model to Configs\n// -----------------\n\nexport type CandyMachineConfigs = {\n  wallet: PublicKey;\n  tokenMint: Option<PublicKey>;\n  price: Amount;\n  sellerFeeBasisPoints: number;\n  itemsAvailable: BigNumber;\n  symbol: string;\n  maxEditionSupply: BigNumber;\n  isMutable: boolean;\n  retainAuthority: boolean;\n  goLiveDate: Option<DateTime>;\n  endSettings: Option<EndSettings>;\n  hiddenSettings: Option<HiddenSettings>;\n  whitelistMintSettings: Option<WhitelistMintSettings>;\n  gatekeeper: Option<Gatekeeper>;\n  creators: Creator[];\n};\n\nexport const toCandyMachineConfigs = (\n  candyMachine: CandyMachine\n): CandyMachineConfigs => {\n  return {\n    wallet: candyMachine.walletAddress,\n    tokenMint: candyMachine.tokenMintAddress,\n    ...candyMachine,\n  };\n};\n\n// -----------------\n// Configs to Program\n// -----------------\n\nexport type CandyMachineInstructionData = {\n  wallet: PublicKey;\n  tokenMint: Option<PublicKey>;\n  data: CandyMachineData;\n};\n\nexport const toCandyMachineInstructionData = (\n  address: PublicKey,\n  configs: CandyMachineConfigs\n): CandyMachineInstructionData => {\n  const endSettings = configs.endSettings;\n  const whitelistMintSettings = configs.whitelistMintSettings;\n  const gatekeeper = configs.gatekeeper;\n\n  return {\n    wallet: configs.wallet,\n    tokenMint: configs.tokenMint,\n    data: {\n      ...configs,\n      uuid: getCandyMachineUuidFromAddress(address),\n      price: configs.price.basisPoints,\n      maxSupply: configs.maxEditionSupply,\n      endSettings: endSettings\n        ? {\n            ...endSettings,\n            number:\n              endSettings.endSettingType === EndSettingType.Date\n                ? endSettings.date\n                : endSettings.number,\n          }\n        : null,\n      whitelistMintSettings: whitelistMintSettings\n        ? {\n            ...whitelistMintSettings,\n            discountPrice:\n              whitelistMintSettings.discountPrice?.basisPoints ?? null,\n          }\n        : null,\n      gatekeeper: gatekeeper\n        ? {\n            ...gatekeeper,\n            gatekeeperNetwork: gatekeeper.network,\n          }\n        : null,\n    },\n  };\n};\n"],"names":["isCandyMachine","value","model","assertCandyMachine","assert","toCandyMachine","account","unparsedAccount","itemsAvailable","toBigNumber","data","itemsMinted","itemsRedeemed","endSettings","hiddenSettings","whitelistMintSettings","gatekeeper","rawData","itemsLoaded","countCandyMachineItems","items","parseCandyMachineItems","address","publicKey","authorityAddress","authority","walletAddress","wallet","tokenMintAddress","tokenMint","uuid","price","lamports","symbol","removeEmptyChars","sellerFeeBasisPoints","isMutable","retainAuthority","goLiveDate","toOptionDateTime","maxEditionSupply","maxSupply","itemsRemaining","sub","isFullyLoaded","lte","endSettingType","EndSettingType","Date","date","toDateTime","number","Amount","discountPrice","network","gatekeeperNetwork","creators","toCandyMachineConfigs","candyMachine","toCandyMachineInstructionData","configs","getCandyMachineUuidFromAddress","basisPoints"],"mappings":"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"}