{"version":3,"file":"updateCandyMachine.mjs","sources":["../../../../src/plugins/candyMachineModule/updateCandyMachine.ts"],"sourcesContent":["import isEqual from 'lodash.isequal';\nimport type { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport {\n  createUpdateAuthorityInstruction,\n  createUpdateCandyMachineInstruction,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  assertSameCurrencies,\n  Operation,\n  OperationHandler,\n  Signer,\n  SOL,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport {\n  CandyMachine,\n  CandyMachineConfigs,\n  toCandyMachineConfigs,\n  toCandyMachineInstructionData,\n} from './CandyMachine';\nimport { NoInstructionsToSendError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyMachineOperation' as const;\nexport const updateCandyMachineOperation =\n  useOperation<UpdateCandyMachineOperation>(Key);\nexport type UpdateCandyMachineOperation = Operation<\n  typeof Key,\n  UpdateCandyMachineInput,\n  UpdateCandyMachineOutput\n>;\n\nexport type UpdateCandyMachineInputWithoutConfigs = {\n  // Models and accounts.\n  candyMachine: CandyMachine;\n  authority?: Signer;\n  newAuthority?: PublicKey;\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type UpdateCandyMachineInput = UpdateCandyMachineInputWithoutConfigs &\n  Partial<CandyMachineConfigs>;\n\nexport type UpdateCandyMachineOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const updateCandyMachineOperationHandler: OperationHandler<UpdateCandyMachineOperation> =\n  {\n    async handle(\n      operation: UpdateCandyMachineOperation,\n      metaplex: Metaplex\n    ): Promise<UpdateCandyMachineOutput> {\n      const builder = updateCandyMachineBuilder(metaplex, operation.input);\n\n      if (builder.isEmpty()) {\n        throw new NoInstructionsToSendError(Key);\n      }\n\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type UpdateCandyMachineBuilderParams = Omit<\n  UpdateCandyMachineInput,\n  'confirmOptions'\n> & {\n  updateInstructionKey?: string;\n  updateAuthorityInstructionKey?: string;\n};\n\nexport const updateCandyMachineBuilder = (\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams\n): TransactionBuilder => {\n  const {\n    candyMachine,\n    authority = metaplex.identity(),\n    newAuthority,\n    updateInstructionKey,\n    updateAuthorityInstructionKey,\n    ...updatableFields\n  } = params;\n  const currentConfigs = toCandyMachineConfigs(candyMachine);\n  const instructionDataWithoutChanges = toCandyMachineInstructionData(\n    candyMachine.address,\n    currentConfigs\n  );\n  const instructionData = toCandyMachineInstructionData(candyMachine.address, {\n    ...currentConfigs,\n    ...updatableFields,\n  });\n  const { data, wallet, tokenMint } = instructionData;\n  const shouldSendUpdateInstruction = !isEqual(\n    instructionData,\n    instructionDataWithoutChanges\n  );\n  const shouldSendUpdateAuthorityInstruction =\n    !!newAuthority && !newAuthority.equals(authority.publicKey);\n\n  const updateInstruction = createUpdateCandyMachineInstruction(\n    {\n      candyMachine: candyMachine.address,\n      authority: authority.publicKey,\n      wallet,\n    },\n    { data }\n  );\n\n  if (tokenMint) {\n    updateInstruction.keys.push({\n      pubkey: tokenMint,\n      isWritable: false,\n      isSigner: false,\n    });\n  } else if (params.price) {\n    assertSameCurrencies(params.price, SOL);\n  }\n\n  return (\n    TransactionBuilder.make()\n\n      // Update data.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: updateInstruction,\n          signers: [authority],\n          key: updateInstructionKey ?? 'update',\n        })\n      )\n\n      // Update authority.\n      .when(shouldSendUpdateAuthorityInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateAuthorityInstruction(\n            {\n              candyMachine: candyMachine.address,\n              authority: authority.publicKey,\n              wallet: candyMachine.walletAddress,\n            },\n            { newAuthority: newAuthority as PublicKey }\n          ),\n          signers: [authority],\n          key: updateAuthorityInstructionKey ?? 'updateAuthority',\n        })\n      )\n  );\n};\n"],"names":["Key","updateCandyMachineOperation","useOperation","updateCandyMachineOperationHandler","handle","operation","metaplex","builder","updateCandyMachineBuilder","input","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","candyMachine","authority","identity","newAuthority","updateInstructionKey","updateAuthorityInstructionKey","updatableFields","currentConfigs","toCandyMachineConfigs","instructionDataWithoutChanges","toCandyMachineInstructionData","address","instructionData","data","wallet","tokenMint","shouldSendUpdateInstruction","isEqual","shouldSendUpdateAuthorityInstruction","equals","publicKey","updateInstruction","createUpdateCandyMachineInstruction","keys","push","pubkey","isWritable","isSigner","price","assertSameCurrencies","SOL","TransactionBuilder","make","when","add","instruction","signers","key","createUpdateAuthorityInstruction","walletAddress"],"mappings":"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"}