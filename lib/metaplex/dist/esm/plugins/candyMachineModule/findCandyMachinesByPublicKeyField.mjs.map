{"version":3,"file":"findCandyMachinesByPublicKeyField.mjs","sources":["../../../../src/plugins/candyMachineModule/findCandyMachinesByPublicKeyField.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { CandyMachine, toCandyMachine } from './CandyMachine';\nimport { parseCandyMachineAccount } from './accounts';\nimport { CandyMachineProgram } from './program';\nimport { UnreachableCaseError } from '@/errors';\nimport { CandyMachineGpaBuilder } from './gpaBuilders';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachinesByPublicKeyOperation' as const;\nexport const findCandyMachinesByPublicKeyFieldOperation =\n  useOperation<FindCandyMachinesByPublicKeyFieldOperation>(Key);\nexport type FindCandyMachinesByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindCandyMachinesByPublicKeyFieldInput,\n  CandyMachine[]\n>;\n\nexport type FindCandyMachinesByPublicKeyFieldInput = {\n  type: 'authority' | 'wallet';\n  publicKey: PublicKey;\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findCandyMachinesByPublicKeyFieldOnChainOperationHandler: OperationHandler<FindCandyMachinesByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachinesByPublicKeyFieldOperation,\n      metaplex: Metaplex\n    ): Promise<CandyMachine[]> => {\n      const { type, publicKey, commitment } = operation.input;\n      const accounts = CandyMachineProgram.accounts(metaplex).mergeConfig({\n        commitment,\n      });\n\n      let candyMachineQuery: CandyMachineGpaBuilder;\n      switch (type) {\n        case 'authority':\n          candyMachineQuery =\n            accounts.candyMachineAccountsForAuthority(publicKey);\n          break;\n        case 'wallet':\n          candyMachineQuery = accounts.candyMachineAccountsForWallet(publicKey);\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n\n      const unparsedAccounts = await candyMachineQuery.get();\n\n      return unparsedAccounts.map((unparsedAccount) => {\n        const account = parseCandyMachineAccount(unparsedAccount);\n        return toCandyMachine(account, unparsedAccount);\n      });\n    },\n  };\n"],"names":["Key","findCandyMachinesByPublicKeyFieldOperation","useOperation","findCandyMachinesByPublicKeyFieldOnChainOperationHandler","handle","operation","metaplex","type","publicKey","commitment","input","accounts","CandyMachineProgram","mergeConfig","candyMachineQuery","candyMachineAccountsForAuthority","candyMachineAccountsForWallet","UnreachableCaseError","unparsedAccounts","get","map","unparsedAccount","account","parseCandyMachineAccount","toCandyMachine"],"mappings":";;;;;;AASA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,uCAAZ,CAAA;MACaC,0CAA0C,GACrDC,YAAY,CAA6CF,GAA7C,EADP;AAcP;AACA;AACA;AAEO,MAAMG,wDAAsH,GACjI;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGsB;IAC5B,MAAM;MAAEC,IAAF;MAAQC,SAAR;AAAmBC,MAAAA,UAAAA;KAAeJ,GAAAA,SAAS,CAACK,KAAlD,CAAA;IACA,MAAMC,QAAQ,GAAGC,mBAAmB,CAACD,QAApB,CAA6BL,QAA7B,CAAuCO,CAAAA,WAAvC,CAAmD;AAClEJ,MAAAA,UAAAA;AADkE,KAAnD,CAAjB,CAAA;AAIA,IAAA,IAAIK,iBAAJ,CAAA;;AACA,IAAA,QAAQP,IAAR;AACE,MAAA,KAAK,WAAL;AACEO,QAAAA,iBAAiB,GACfH,QAAQ,CAACI,gCAAT,CAA0CP,SAA1C,CADF,CAAA;AAEA,QAAA,MAAA;;AACF,MAAA,KAAK,QAAL;AACEM,QAAAA,iBAAiB,GAAGH,QAAQ,CAACK,6BAAT,CAAuCR,SAAvC,CAApB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIS,oBAAJ,CAAyBV,IAAzB,CAAN,CAAA;AATJ,KAAA;;AAYA,IAAA,MAAMW,gBAAgB,GAAG,MAAMJ,iBAAiB,CAACK,GAAlB,EAA/B,CAAA;AAEA,IAAA,OAAOD,gBAAgB,CAACE,GAAjB,CAAsBC,eAAD,IAAqB;AAC/C,MAAA,MAAMC,OAAO,GAAGC,wBAAwB,CAACF,eAAD,CAAxC,CAAA;AACA,MAAA,OAAOG,cAAc,CAACF,OAAD,EAAUD,eAAV,CAArB,CAAA;AACD,KAHM,CAAP,CAAA;AAID,GAAA;AA7BH;;;;"}