{"version":3,"file":"asserts.mjs","sources":["../../../../src/plugins/candyMachineModule/asserts.ts"],"sourcesContent":["import { Creator } from '@metaplex-foundation/mpl-token-metadata';\nimport { assert } from '@/utils';\nimport {\n  MAX_CREATOR_LIMIT,\n  MAX_NAME_LENGTH,\n  MAX_SYMBOL_LENGTH,\n  MAX_URI_LENGTH,\n} from './constants';\nimport { CandyMachine } from './CandyMachine';\nimport {\n  CandyMachineAddItemConstraintsViolatedError,\n  CandyMachineCannotAddAmountError,\n  CandyMachineIsFullError,\n} from './errors';\nimport { ConfigLine } from '@metaplex-foundation/mpl-candy-machine';\nimport { BigNumber, toBigNumber } from '@/types';\n\nexport const assertName = (name: string) => {\n  assert(\n    name.length <= MAX_NAME_LENGTH,\n    `Candy Machine name too long: ${name} (max ${MAX_NAME_LENGTH})`\n  );\n};\n\nexport const assertSymbol = (symbol: string) => {\n  assert(\n    symbol.length <= MAX_SYMBOL_LENGTH,\n    `Candy Machine symbol too long: ${symbol} (max ${MAX_SYMBOL_LENGTH})`\n  );\n};\n\nexport const assertUri = (uri: string) => {\n  assert(\n    uri.length <= MAX_URI_LENGTH,\n    `Candy Machine URI too long: ${uri} (max ${MAX_URI_LENGTH})`\n  );\n};\n\nexport const assertCreators = (creators: Creator[]) => {\n  assert(\n    creators.length <= MAX_CREATOR_LIMIT,\n    `Candy Machine creators too long: ${creators} (max ${MAX_CREATOR_LIMIT})`\n  );\n};\n\nexport const assertNotFull = (candyMachine: CandyMachine, index: BigNumber) => {\n  if (candyMachine.isFullyLoaded) {\n    throw new CandyMachineIsFullError(index, candyMachine.itemsAvailable);\n  }\n};\n\nexport const assertCanAdd = (\n  candyMachine: CandyMachine,\n  index: BigNumber,\n  amount: number\n) => {\n  if (index.addn(amount).gt(candyMachine.itemsAvailable)) {\n    throw new CandyMachineCannotAddAmountError(\n      index,\n      amount,\n      candyMachine.itemsAvailable\n    );\n  }\n};\n\nexport const assertAllConfigLineConstraints = (configLines: ConfigLine[]) => {\n  for (let i = 0; i < configLines.length; i++) {\n    try {\n      assertName(configLines[i].name);\n      assertUri(configLines[i].uri);\n    } catch (err: any) {\n      throw new CandyMachineAddItemConstraintsViolatedError(\n        toBigNumber(i),\n        configLines[i],\n        err\n      );\n    }\n  }\n};\n"],"names":["assertName","name","assert","length","MAX_NAME_LENGTH","assertUri","uri","MAX_URI_LENGTH","assertNotFull","candyMachine","index","isFullyLoaded","CandyMachineIsFullError","itemsAvailable","assertCanAdd","amount","addn","gt","CandyMachineCannotAddAmountError","assertAllConfigLineConstraints","configLines","i","err","CandyMachineAddItemConstraintsViolatedError","toBigNumber"],"mappings":";;;;;AAiBaA,MAAAA,UAAU,GAAIC,IAAD,IAAkB;AAC1CC,EAAAA,MAAM,CACJD,IAAI,CAACE,MAAL,IAAeC,eADX,EAEH,CAAA,6BAAA,EAA+BH,IAAK,CAAA,MAAA,EAAQG,eAAgB,CAAA,CAAA,CAFzD,CAAN,CAAA;AAID,EALM;AAcMC,MAAAA,SAAS,GAAIC,GAAD,IAAiB;AACxCJ,EAAAA,MAAM,CACJI,GAAG,CAACH,MAAJ,IAAcI,cADV,EAEH,CAAA,4BAAA,EAA8BD,GAAI,CAAA,MAAA,EAAQC,cAAe,CAAA,CAAA,CAFtD,CAAN,CAAA;AAID,EALM;MAcMC,aAAa,GAAG,CAACC,YAAD,EAA6BC,KAA7B,KAAkD;EAC7E,IAAID,YAAY,CAACE,aAAjB,EAAgC;IAC9B,MAAM,IAAIC,uBAAJ,CAA4BF,KAA5B,EAAmCD,YAAY,CAACI,cAAhD,CAAN,CAAA;AACD,GAAA;AACF,EAJM;AAMA,MAAMC,YAAY,GAAG,CAC1BL,YAD0B,EAE1BC,KAF0B,EAG1BK,MAH0B,KAIvB;AACH,EAAA,IAAIL,KAAK,CAACM,IAAN,CAAWD,MAAX,CAAA,CAAmBE,EAAnB,CAAsBR,YAAY,CAACI,cAAnC,CAAJ,EAAwD;IACtD,MAAM,IAAIK,gCAAJ,CACJR,KADI,EAEJK,MAFI,EAGJN,YAAY,CAACI,cAHT,CAAN,CAAA;AAKD,GAAA;AACF,EAZM;AAcMM,MAAAA,8BAA8B,GAAIC,WAAD,IAA+B;AAC3E,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACjB,MAAhC,EAAwCkB,CAAC,EAAzC,EAA6C;IAC3C,IAAI;AACFrB,MAAAA,UAAU,CAACoB,WAAW,CAACC,CAAD,CAAX,CAAepB,IAAhB,CAAV,CAAA;AACAI,MAAAA,SAAS,CAACe,WAAW,CAACC,CAAD,CAAX,CAAef,GAAhB,CAAT,CAAA;KAFF,CAGE,OAAOgB,GAAP,EAAiB;AACjB,MAAA,MAAM,IAAIC,2CAAJ,CACJC,WAAW,CAACH,CAAD,CADP,EAEJD,WAAW,CAACC,CAAD,CAFP,EAGJC,GAHI,CAAN,CAAA;AAKD,KAAA;AACF,GAAA;AACF;;;;"}