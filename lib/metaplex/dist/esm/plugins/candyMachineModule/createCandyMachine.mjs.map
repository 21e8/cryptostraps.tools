{"version":3,"file":"createCandyMachine.mjs","sources":["../../../../src/plugins/candyMachineModule/createCandyMachine.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport {\n  createInitializeCandyMachineInstruction,\n  Creator,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  useOperation,\n  Signer,\n  OperationHandler,\n  assertSameCurrencies,\n  SOL,\n  toBigNumber,\n  toUniformCreators,\n} from '@/types';\nimport { DisposableScope, RequiredKeys, TransactionBuilder } from '@/utils';\nimport { CandyMachineProgram } from './program';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { getCandyMachineAccountSizeFromData } from './helpers';\nimport {\n  CandyMachineConfigs,\n  toCandyMachineInstructionData,\n} from './CandyMachine';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyMachineOperation' as const;\nexport const createCandyMachineOperation =\n  useOperation<CreateCandyMachineOperation>(Key);\nexport type CreateCandyMachineOperation = Operation<\n  typeof Key,\n  CreateCandyMachineInput,\n  CreateCandyMachineOutput\n>;\n\nexport type CreateCandyMachineInputWithoutConfigs = {\n  // Accounts.\n  candyMachine?: Signer; // Defaults to Keypair.generate().\n  payer?: Signer; // Defaults to mx.identity().\n  authority?: PublicKey; // Defaults to mx.identity().\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateCandyMachineInput = CreateCandyMachineInputWithoutConfigs &\n  RequiredKeys<\n    Partial<CandyMachineConfigs>,\n    'price' | 'sellerFeeBasisPoints' | 'itemsAvailable'\n  >;\n\nexport type CreateCandyMachineOutput = {\n  response: SendAndConfirmTransactionResponse;\n  candyMachineSigner: Signer;\n  payer: Signer;\n  wallet: PublicKey;\n  authority: PublicKey;\n  creators: Creator[];\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createCandyMachineOperationHandler: OperationHandler<CreateCandyMachineOperation> =\n  {\n    async handle(\n      operation: CreateCandyMachineOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateCandyMachineOutput> {\n      const builder = await createCandyMachineBuilder(\n        metaplex,\n        operation.input\n      );\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateCandyMachineBuilderParams = Omit<\n  CreateCandyMachineInput,\n  'confirmOptions'\n> & {\n  createAccountInstructionKey?: string;\n  initializeCandyMachineInstructionKey?: string;\n};\n\nexport type CreateCandyMachineBuilderContext = Omit<\n  CreateCandyMachineOutput,\n  'response'\n>;\n\nexport const createCandyMachineBuilder = async (\n  metaplex: Metaplex,\n  params: CreateCandyMachineBuilderParams\n): Promise<TransactionBuilder<CreateCandyMachineBuilderContext>> => {\n  const candyMachine = params.candyMachine ?? Keypair.generate();\n  const payer: Signer = params.payer ?? metaplex.identity();\n  const authority = params.authority ?? metaplex.identity().publicKey;\n  const { data, wallet, tokenMint } = toCandyMachineInstructionData(\n    candyMachine.publicKey,\n    {\n      ...params,\n      wallet: params.wallet ?? metaplex.identity().publicKey,\n      tokenMint: params.tokenMint ?? null,\n      symbol: params.symbol ?? '',\n      maxEditionSupply: params.maxEditionSupply ?? toBigNumber(0),\n      isMutable: params.isMutable ?? true,\n      retainAuthority: params.retainAuthority ?? true,\n      goLiveDate: params.goLiveDate ?? null,\n      endSettings: params.endSettings ?? null,\n      creators:\n        params.creators ?? toUniformCreators(metaplex.identity().publicKey),\n      hiddenSettings: params.hiddenSettings ?? null,\n      whitelistMintSettings: params.whitelistMintSettings ?? null,\n      gatekeeper: params.gatekeeper ?? null,\n    }\n  );\n\n  const initializeInstruction = createInitializeCandyMachineInstruction(\n    {\n      candyMachine: candyMachine.publicKey,\n      wallet,\n      authority,\n      payer: payer.publicKey,\n    },\n    { data }\n  );\n\n  if (tokenMint) {\n    initializeInstruction.keys.push({\n      pubkey: tokenMint,\n      isWritable: false,\n      isSigner: false,\n    });\n  } else {\n    assertSameCurrencies(params.price, SOL);\n  }\n\n  return (\n    TransactionBuilder.make<CreateCandyMachineBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        candyMachineSigner: candyMachine,\n        payer,\n        wallet,\n        authority,\n        creators: data.creators,\n      })\n\n      // Create an empty account for the candy machine.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount({\n            payer,\n            newAccount: candyMachine,\n            space: getCandyMachineAccountSizeFromData(data),\n            program: CandyMachineProgram.publicKey,\n            instructionKey:\n              params.createAccountInstructionKey ?? 'createAccount',\n          })\n      )\n\n      // Initialize the candy machine account.\n      .add({\n        instruction: initializeInstruction,\n        signers: [candyMachine, payer],\n        key:\n          params.initializeCandyMachineInstructionKey ??\n          'initializeCandyMachine',\n      })\n  );\n};\n"],"names":["Key","createCandyMachineOperation","useOperation","createCandyMachineOperationHandler","handle","operation","metaplex","scope","builder","createCandyMachineBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","candyMachine","Keypair","generate","payer","identity","authority","publicKey","data","wallet","tokenMint","toCandyMachineInstructionData","symbol","maxEditionSupply","toBigNumber","isMutable","retainAuthority","goLiveDate","endSettings","creators","toUniformCreators","hiddenSettings","whitelistMintSettings","gatekeeper","initializeInstruction","createInitializeCandyMachineInstruction","keys","push","pubkey","isWritable","isSigner","assertSameCurrencies","price","SOL","TransactionBuilder","make","setFeePayer","setContext","candyMachineSigner","add","system","builders","createAccount","newAccount","space","getCandyMachineAccountSizeFromData","program","CandyMachineProgram","instructionKey","createAccountInstructionKey","instruction","signers","key","initializeCandyMachineInstructionKey"],"mappings":"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"}