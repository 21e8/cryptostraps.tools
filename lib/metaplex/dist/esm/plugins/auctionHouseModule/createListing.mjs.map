{"version":3,"file":"createListing.mjs","sources":["../../../../src/plugins/auctionHouseModule/createListing.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport {\n  createAuctioneerSellInstruction,\n  createPrintListingReceiptInstruction,\n  createSellInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport type { Metaplex } from '@/Metaplex';\nimport type { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  Amount,\n  toPublicKey,\n  token,\n  lamports,\n  isSigner,\n  Pda,\n  amount,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  findAuctioneerPda,\n  findAuctionHouseProgramAsSignerPda,\n  findAuctionHouseTradeStatePda,\n  findListingReceiptPda,\n} from './pdas';\nimport { AuctionHouse } from './AuctionHouse';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { findMetadataPda } from '@/programs';\nimport { AUCTIONEER_PRICE } from './constants';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateListingOperation' as const;\nexport const createListingOperation = useOperation<CreateListingOperation>(Key);\nexport type CreateListingOperation = Operation<\n  typeof Key,\n  CreateListingInput,\n  CreateListingOutput\n>;\n\nexport type CreateListingInput = {\n  auctionHouse: AuctionHouse;\n  wallet?: PublicKey | Signer; // Default: identity\n  authority?: PublicKey | Signer; // Default: auctionHouse.authority\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n  mintAccount: PublicKey; // Required for checking Metadata\n  tokenAccount?: PublicKey; // Default: ATA\n  price?: Amount; // Default: lamports(0)\n  tokens?: Amount; // Default: token(1)\n  bookkeeper?: Signer; // Default: identity\n  printReceipt?: boolean; // Default: true\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateListingOutput = {\n  response: SendAndConfirmTransactionResponse;\n  sellerTradeState: Pda;\n  freeSellerTradeState: Pda;\n  tokenAccount: PublicKey;\n  metadata: Pda;\n  wallet: PublicKey;\n  receipt: Pda;\n  bookkeeper: PublicKey;\n  price: Amount;\n  tokens: Amount;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createListingOperationHandler: OperationHandler<CreateListingOperation> =\n  {\n    handle: async (operation: CreateListingOperation, metaplex: Metaplex) => {\n      const builder = createListingBuilder(metaplex, operation.input);\n\n      const response = await metaplex\n        .rpc()\n        .sendAndConfirmTransaction(\n          builder,\n          undefined,\n          operation.input.confirmOptions\n        );\n\n      return {\n        response,\n        ...builder.getContext(),\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateListingBuilderParams = Omit<\n  CreateListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport type CreateListingBuilderContext = Omit<CreateListingOutput, 'response'>;\n\nexport const createListingBuilder = (\n  metaplex: Metaplex,\n  params: CreateListingBuilderParams\n): TransactionBuilder<CreateListingBuilderContext> => {\n  // Data.\n  const auctionHouse = params.auctionHouse;\n  const tokens = params.tokens ?? token(1);\n  const priceBasisPoint = params.auctioneerAuthority\n    ? AUCTIONEER_PRICE\n    : params.price?.basisPoints ?? 0;\n  const price = amount(priceBasisPoint, auctionHouse.treasuryMint.currency);\n\n  // Accounts.\n  const wallet = params.wallet ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n  const metadata = findMetadataPda(params.mintAccount);\n  const tokenAccount =\n    params.tokenAccount ??\n    findAssociatedTokenAccountPda(params.mintAccount, toPublicKey(wallet));\n  const sellerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(wallet),\n    tokenAccount,\n    auctionHouse.treasuryMint.address,\n    params.mintAccount,\n    price.basisPoints,\n    tokens.basisPoints\n  );\n  const freeSellerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(wallet),\n    tokenAccount,\n    auctionHouse.treasuryMint.address,\n    params.mintAccount,\n    lamports(0).basisPoints,\n    tokens.basisPoints\n  );\n  const programAsSigner = findAuctionHouseProgramAsSignerPda();\n  const accounts = {\n    wallet: toPublicKey(wallet),\n    tokenAccount,\n    metadata,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    sellerTradeState,\n    freeSellerTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    tradeStateBump: sellerTradeState.bump,\n    freeTradeStateBump: freeSellerTradeState.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Sell Instruction.\n  let sellInstruction;\n  if (params.auctioneerAuthority) {\n    sellInstruction = createAuctioneerSellInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: params.auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouse.address,\n          params.auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  } else {\n    sellInstruction = createSellInstruction(accounts, args);\n  }\n\n  // Signers.\n  const sellSigners = [wallet, authority, params.auctioneerAuthority].filter(\n    (input): input is Signer => !!input && isSigner(input)\n  );\n\n  // Receipt.\n  const bookkeeper: Signer = params.bookkeeper ?? metaplex.identity();\n  const receipt = findListingReceiptPda(sellerTradeState);\n\n  return (\n    TransactionBuilder.make<CreateListingBuilderContext>()\n      .setContext({\n        sellerTradeState,\n        freeSellerTradeState,\n        tokenAccount,\n        metadata,\n        wallet: toPublicKey(wallet),\n        receipt,\n        bookkeeper: bookkeeper.publicKey,\n        price,\n        tokens,\n      })\n\n      // Create Listing.\n      .add({\n        instruction: sellInstruction,\n        signers: sellSigners,\n        key: 'sell',\n      })\n\n      // Print the Listing Receipt.\n      .when(params.printReceipt ?? true, (builder) =>\n        builder.add({\n          instruction: createPrintListingReceiptInstruction(\n            {\n              receipt,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { receiptBump: receipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printListingReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","createListingOperation","useOperation","createListingOperationHandler","handle","operation","metaplex","builder","createListingBuilder","input","response","rpc","sendAndConfirmTransaction","undefined","confirmOptions","getContext","params","auctionHouse","tokens","token","priceBasisPoint","auctioneerAuthority","AUCTIONEER_PRICE","price","basisPoints","amount","treasuryMint","currency","wallet","identity","authority","authorityAddress","metadata","findMetadataPda","mintAccount","tokenAccount","findAssociatedTokenAccountPda","toPublicKey","sellerTradeState","findAuctionHouseTradeStatePda","address","freeSellerTradeState","lamports","programAsSigner","findAuctionHouseProgramAsSignerPda","accounts","auctionHouseFeeAccount","feeAccountAddress","args","tradeStateBump","bump","freeTradeStateBump","programAsSignerBump","buyerPrice","tokenSize","sellInstruction","createAuctioneerSellInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","createSellInstruction","sellSigners","filter","isSigner","bookkeeper","receipt","findListingReceiptPda","TransactionBuilder","make","setContext","add","instruction","signers","key","when","printReceipt","createPrintListingReceiptInstruction","SYSVAR_INSTRUCTIONS_PUBKEY","receiptBump"],"mappings":"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"}