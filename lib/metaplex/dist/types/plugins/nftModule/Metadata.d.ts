import { PublicKey } from '@solana/web3.js';
import { Collection, Creator, TokenStandard, Uses } from '@metaplex-foundation/mpl-token-metadata';
import { Pda } from "../../types";
import { JsonMetadata } from '../nftModule';
import { Option } from "../../utils";
import { MetadataAccount } from "../../programs";
import { Mint, MintAccount, TokenAccount, TokenWithMint } from '../tokenModule';
export declare type Metadata = Readonly<{
    model: 'metadata';
    address: Pda;
    mintAddress: PublicKey;
    updateAuthorityAddress: PublicKey;
    json: Option<JsonMetadata>;
    jsonLoaded: boolean;
    name: string;
    symbol: string;
    uri: string;
    isMutable: boolean;
    primarySaleHappened: boolean;
    sellerFeeBasisPoints: number;
    editionNonce: Option<number>;
    creators: Creator[];
    tokenStandard: Option<TokenStandard>;
    collection: Option<Collection>;
    uses: Option<Uses>;
}>;
export declare const isMetadata: (value: any) => value is Readonly<{
    model: 'metadata';
    address: Pda;
    mintAddress: PublicKey;
    updateAuthorityAddress: PublicKey;
    json: Option<JsonMetadata>;
    jsonLoaded: boolean;
    name: string;
    symbol: string;
    uri: string;
    isMutable: boolean;
    primarySaleHappened: boolean;
    sellerFeeBasisPoints: number;
    editionNonce: Option<number>;
    creators: Creator[];
    tokenStandard: Option<TokenStandard>;
    collection: Option<Collection>;
    uses: Option<Uses>;
}>;
export declare const assertMetadata: (value: any) => asserts value is Readonly<{
    model: 'metadata';
    address: Pda;
    mintAddress: PublicKey;
    updateAuthorityAddress: PublicKey;
    json: Option<JsonMetadata>;
    jsonLoaded: boolean;
    name: string;
    symbol: string;
    uri: string;
    isMutable: boolean;
    primarySaleHappened: boolean;
    sellerFeeBasisPoints: number;
    editionNonce: Option<number>;
    creators: Creator[];
    tokenStandard: Option<TokenStandard>;
    collection: Option<Collection>;
    uses: Option<Uses>;
}>;
export declare const toMetadata: (account: MetadataAccount, json?: Option<JsonMetadata<string>> | undefined) => Metadata;
export declare type MintWithMetadata = Omit<Mint, 'model'> & Readonly<{
    model: 'mintWithMetadata';
    metadata: Metadata;
}>;
export declare const isMintWithMetadata: (value: any) => value is MintWithMetadata;
export declare const assertMintWithMetadata: (value: any) => asserts value is MintWithMetadata;
export declare const toMintWithMetadata: (mintAccount: MintAccount, metadataModel: Metadata) => MintWithMetadata;
export declare type TokenWithMetadata = Omit<TokenWithMint, 'model'> & Readonly<{
    model: 'tokenWithMetadata';
    metadata: Metadata;
}>;
export declare const isTokenWithMetadata: (value: any) => value is TokenWithMetadata;
export declare const assertTokenWithMetadata: (value: any) => asserts value is TokenWithMetadata;
export declare const toTokenWithMetadata: (tokenAccount: TokenAccount, mintModel: Mint, metadataModel: Metadata) => TokenWithMetadata;
